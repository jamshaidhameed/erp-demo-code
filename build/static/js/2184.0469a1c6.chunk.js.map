{"version":3,"file":"static/js/2184.0469a1c6.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/utils.ts"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Action, FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result\n      this.currentResultOptions = this.options\n      this.currentResultState = this.currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.trackedProps,\n      )\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false\n  }\n\n  // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData\n  }\n\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","'use client'\nimport { QueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","'use client'\nimport * as React from 'react'\n\nimport { notifyManager } from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, fetchOptimistic, shouldSuspend } from './suspense'\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n"],"names":["MutationObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","setOptions","bindMethods","updateResult","_createClass","key","value","this","mutate","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","_this$currentMutation2","hasListeners","removeObserver","action","notifyOptions","listeners","onSuccess","onError","currentResult","undefined","variables","mutateOptions","build","_objectSpread","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","_this2","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","_ref","listener","Subscribable","useMutation","arg1","arg2","arg3","_React$useState","React","queryClient","_slicedToArray","useSyncExternalStore","onStoreChange","subscribe","batchCalls","getCurrentResult","shouldThrowError","useErrorBoundary","noop","QueryObserver","trackedProps","Set","selectError","remove","refetch","size","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","destroy","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","prevQuery","defaultQueryOptions","getQueryCache","query","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","createResult","optimisticResult","keepPreviousData","placeholderData","isPlaceholderData","shouldAssignObserverCurrentProperties","currentResultOptions","currentResultState","trackedResult","Object","keys","defineProperty","configurable","enumerable","get","add","arguments","length","refetchPage","_objectWithoutProperties","_excluded","fetch","meta","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","promise","throwOnError","catch","_this5","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","nextInterval","_this6","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","isPreviousData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","select","selectFn","selectResult","replaceData","process","Date","now","isFetching","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","_this7","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","some","typedKey","has","shouldNotifyListeners","manual","isCancelledError","_this8","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","_ref2","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","createValue","clearReset","isReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","IsRestoringContext","useIsRestoring","Provider","errorResetBoundary","useClearResetErrorBoundary","getHasError","ensureStaleTime","shouldSuspend","isRestoring","willFetch","fetchOptimistic","useQuery","Observer","ensurePreventErrorBoundaryRetry","getOptimisticResult","unsubscribe","trackResult","useBaseQuery","useSyncExternalStore$1","_useErrorBoundary","params","apply","_toConsumableArray"],"sourceRoot":""}